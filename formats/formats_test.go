package formats_test

import (
	"fmt"
	"math"
	"testing"
	"time"

	"github.com/hexian000/tlswrapper/formats"
)

func TestSIPrefix(t *testing.T) {
	zero := 0.0
	cases := [...]struct {
		in float64
		s  string
	}{
		{math.NaN(), "NaN"}, {-math.NaN(), "NaN"},
		{math.Inf(1), "+Inf"}, {math.Inf(-1), "-Inf"},
		{zero, "0"}, {-zero, "-0"},
		{3e-39, "3e-09q"}, {3e-38, "3e-08q"}, {3e-37, "3e-07q"},
		{3e-36, "3e-06q"}, {3e-35, "3e-05q"}, {3e-34, "0.0003q"},
		{3e-33, "0.003q"}, {3e-32, "0.03q"}, {3e-31, "0.3q"},
		{3e-30, "3q"}, {3e-29, "30q"}, {3e-28, "300q"},
		{3e-27, "3r"}, {3e-26, "30r"}, {3e-25, "300r"},
		{3e-24, "3y"}, {3e-23, "30y"}, {3e-22, "300y"},
		{3e-21, "3z"}, {3e-20, "30z"}, {3e-19, "300z"},
		{3e-18, "3a"}, {3e-17, "30a"}, {3e-16, "300a"},
		{3e-15, "3f"}, {3e-14, "30f"}, {3e-13, "300f"},
		{3e-12, "3p"}, {3e-11, "30p"}, {3e-10, "300p"},
		{3e-09, "3n"}, {3e-08, "30n"}, {3e-07, "300n"},
		{3e-06, "3μ"}, {3e-05, "30μ"}, {3e-04, "300μ"},
		{3e-03, "3m"}, {3e-02, "30m"}, {3e-01, "300m"},
		{3e+00, "3"}, {3e+01, "30"}, {3e+02, "300"},
		{3e+03, "3k"}, {3e+04, "30k"}, {3e+05, "300k"},
		{3e+06, "3M"}, {3e+07, "30M"}, {3e+08, "300M"},
		{3e+09, "3G"}, {3e+10, "30G"}, {3e+11, "300G"},
		{3e+12, "3T"}, {3e+13, "30T"}, {3e+14, "300T"},
		{3e+15, "3P"}, {3e+16, "30P"}, {3e+17, "300P"},
		{3e+18, "3E"}, {3e+19, "30E"}, {3e+20, "300E"},
		{3e+21, "3Z"}, {3e+22, "30Z"}, {3e+23, "300Z"},
		{3e+24, "3Y"}, {3e+25, "30Y"}, {3e+26, "300Y"},
		{3e+27, "3R"}, {3e+28, "30R"}, {3e+29, "300R"},
		{3e+30, "3Q"}, {3e+31, "30Q"}, {3e+32, "300Q"},
		{3e+33, "3000Q"}, {3e+34, "30000Q"}, {3e+35, "300000Q"},
		{3e+36, "3e+06Q"}, {3e+37, "3e+07Q"}, {3e+38, "3e+08Q"},
	}
	for _, c := range cases {
		result := formats.SIPrefix(c.in)
		if result != c.s {
			t.Fatalf("expect \"%s\", got \"%s\"", c.s, result)
		}
		fmt.Printf("|%16s|\n", result)
		// fmt.Printf("{%.0e, \"%s\"},\n", c.in, result)
	}
}

func TestIECBytes(t *testing.T) {
	zero := 0.0
	cases := [...]struct {
		in float64
		s  string
	}{
		{math.NaN(), "NaN"}, {-math.NaN(), "NaN"},
		{math.Inf(1), "+Inf"}, {math.Inf(-1), "-Inf"},
		{zero, "0"}, {-zero, "-0"},
		{1e+00, "1 B"}, {1e+01, "10 B"}, {1e+02, "100 B"}, {1e+03, "1000 B"},
		{1e+04, "9.77 KiB"}, {1e+05, "97.7 KiB"}, {1e+06, "977 KiB"},
		{1e+07, "9.54 MiB"}, {1e+08, "95.4 MiB"}, {1e+09, "954 MiB"},
		{1e+10, "9.31 GiB"}, {1e+11, "93.1 GiB"}, {1e+12, "931 GiB"},
		{1e+13, "9.09 TiB"}, {1e+14, "90.9 TiB"}, {1e+15, "909 TiB"},
		{1e+16, "8.88 PiB"}, {1e+17, "88.8 PiB"}, {1e+18, "888 PiB"},
		{1e+19, "8.67 EiB"}, {1e+20, "86.7 EiB"}, {1e+21, "867 EiB"},
		{1e+22, "8.47 ZiB"}, {1e+23, "84.7 ZiB"}, {1e+24, "847 ZiB"},
		{1e+25, "8.27 YiB"}, {1e+26, "82.7 YiB"}, {1e+27, "827 YiB"},
		{1e+28, "8272 YiB"}, {1e+29, "82718 YiB"},
	}
	for _, c := range cases {
		result := formats.IECBytes(c.in)
		if result != c.s {
			t.Fatalf("expect \"%s\", got \"%s\"", c.s, result)
		}
		fmt.Printf("|%16s|\n", result)
		// fmt.Printf("{%.0e, \"%s\"},\n", c.in, result)
	}
}

func TestDuration(t *testing.T) {
	cases := [...]struct {
		in                         time.Duration
		secs, millis, nanos, human string
	}{
		{1 * time.Minute, "1:00", "1:00.000", "1:00.000000000", "1:00.0"},
		{math.MaxInt64, "106751d23:47:16", "106751d23:47:16.854", "106751d23:47:16.854775807", "106751d23:47:17"},
		{math.MinInt64, "-106751d23:47:16", "-106751d23:47:16.854", "-106751d23:47:16.854775808", "-106751d23:47:17"},
		{0, "0:00", "0:00.000", "0:00.000000000", "0"},
		{1, "0:00", "0:00.000", "0:00.000000001", "1ns"},
		{-1, "-0:00", "-0:00.000", "-0:00.000000001", "-1ns"},
		{4, "0:00", "0:00.000", "0:00.000000004", "4ns"},
		{-4, "-0:00", "-0:00.000", "-0:00.000000004", "-4ns"},
		{16, "0:00", "0:00.000", "0:00.000000016", "16ns"},
		{-16, "-0:00", "-0:00.000", "-0:00.000000016", "-16ns"},
		{64, "0:00", "0:00.000", "0:00.000000064", "64ns"},
		{-64, "-0:00", "-0:00.000", "-0:00.000000064", "-64ns"},
		{256, "0:00", "0:00.000", "0:00.000000256", "256ns"},
		{-256, "-0:00", "-0:00.000", "-0:00.000000256", "-256ns"},
		{1024, "0:00", "0:00.000", "0:00.000001024", "1024ns"},
		{-1024, "-0:00", "-0:00.000", "-0:00.000001024", "-1024ns"},
		{4096, "0:00", "0:00.000", "0:00.000004096", "4096ns"},
		{-4096, "-0:00", "-0:00.000", "-0:00.000004096", "-4096ns"},
		{16384, "0:00", "0:00.000", "0:00.000016384", "16.38µs"},
		{-16384, "-0:00", "-0:00.000", "-0:00.000016384", "-16.38µs"},
		{65536, "0:00", "0:00.000", "0:00.000065536", "65.54µs"},
		{-65536, "-0:00", "-0:00.000", "-0:00.000065536", "-65.54µs"},
		{262144, "0:00", "0:00.000", "0:00.000262144", "262.1µs"},
		{-262144, "-0:00", "-0:00.000", "-0:00.000262144", "-262.1µs"},
		{1048576, "0:00", "0:00.001", "0:00.001048576", "1049µs"},
		{-1048576, "-0:00", "-0:00.001", "-0:00.001048576", "-1049µs"},
		{4194304, "0:00", "0:00.004", "0:00.004194304", "4194µs"},
		{-4194304, "-0:00", "-0:00.004", "-0:00.004194304", "-4194µs"},
		{16777216, "0:00", "0:00.016", "0:00.016777216", "16.78ms"},
		{-16777216, "-0:00", "-0:00.016", "-0:00.016777216", "-16.78ms"},
		{67108864, "0:00", "0:00.067", "0:00.067108864", "67.11ms"},
		{-67108864, "-0:00", "-0:00.067", "-0:00.067108864", "-67.11ms"},
		{268435456, "0:00", "0:00.268", "0:00.268435456", "268.4ms"},
		{-268435456, "-0:00", "-0:00.268", "-0:00.268435456", "-268.4ms"},
		{1073741824, "0:01", "0:01.073", "0:01.073741824", "1074ms"},
		{-1073741824, "-0:01", "-0:01.073", "-0:01.073741824", "-1074ms"},
		{4294967296, "0:04", "0:04.294", "0:04.294967296", "4295ms"},
		{-4294967296, "-0:04", "-0:04.294", "-0:04.294967296", "-4295ms"},
		{17179869184, "0:17", "0:17.179", "0:17.179869184", "17.18s"},
		{-17179869184, "-0:17", "-0:17.179", "-0:17.179869184", "-17.18s"},
		{68719476736, "1:08", "1:08.719", "1:08.719476736", "1:08.7"},
		{-68719476736, "-1:08", "-1:08.719", "-1:08.719476736", "-1:08.7"},
		{274877906944, "4:34", "4:34.877", "4:34.877906944", "4:34.9"},
		{-274877906944, "-4:34", "-4:34.877", "-4:34.877906944", "-4:34.9"},
		{1099511627776, "18:19", "18:19.511", "18:19.511627776", "18:20"},
		{-1099511627776, "-18:19", "-18:19.511", "-18:19.511627776", "-18:20"},
		{4398046511104, "1:13:18", "1:13:18.046", "1:13:18.046511104", "1:13:18"},
		{-4398046511104, "-1:13:18", "-1:13:18.046", "-1:13:18.046511104", "-1:13:18"},
		{17592186044416, "4:53:12", "4:53:12.186", "4:53:12.186044416", "4:53:12"},
		{-17592186044416, "-4:53:12", "-4:53:12.186", "-4:53:12.186044416", "-4:53:12"},
		{70368744177664, "19:32:48", "19:32:48.744", "19:32:48.744177664", "19:32:49"},
		{-70368744177664, "-19:32:48", "-19:32:48.744", "-19:32:48.744177664", "-19:32:49"},
		{281474976710656, "3d06:11:14", "3d06:11:14.976", "3d06:11:14.976710656", "3d06:11:15"},
		{-281474976710656, "-3d06:11:14", "-3d06:11:14.976", "-3d06:11:14.976710656", "-3d06:11:15"},
		{1125899906842624, "13d00:44:59", "13d00:44:59.906", "13d00:44:59.906842624", "13d00:44:60"},
		{-1125899906842624, "-13d00:44:59", "-13d00:44:59.906", "-13d00:44:59.906842624", "-13d00:44:60"},
		{4503599627370496, "52d02:59:59", "52d02:59:59.627", "52d02:59:59.627370496", "52d02:59:60"},
		{-4503599627370496, "-52d02:59:59", "-52d02:59:59.627", "-52d02:59:59.627370496", "-52d02:59:60"},
		{18014398509481984, "208d11:59:58", "208d11:59:58.509", "208d11:59:58.509481984", "208d11:59:59"},
		{-18014398509481984, "-208d11:59:58", "-208d11:59:58.509", "-208d11:59:58.509481984", "-208d11:59:59"},
		{72057594037927936, "833d23:59:54", "833d23:59:54.037", "833d23:59:54.037927936", "833d23:59:54"},
		{-72057594037927936, "-833d23:59:54", "-833d23:59:54.037", "-833d23:59:54.037927936", "-833d23:59:54"},
		{288230376151711744, "3335d23:59:36", "3335d23:59:36.151", "3335d23:59:36.151711744", "3335d23:59:36"},
		{-288230376151711744, "-3335d23:59:36", "-3335d23:59:36.151", "-3335d23:59:36.151711744", "-3335d23:59:36"},
		{1152921504606846976, "13343d23:58:24", "13343d23:58:24.606", "13343d23:58:24.606846976", "13343d23:58:25"},
		{-1152921504606846976, "-13343d23:58:24", "-13343d23:58:24.606", "-13343d23:58:24.606846976", "-13343d23:58:25"},
	}
	for _, c := range cases {
		secs := formats.DurationSeconds(c.in)
		millis := formats.DurationMillis(c.in)
		nanos := formats.DurationNanos(c.in)
		human := formats.Duration(c.in)
		if secs != c.secs {
			t.Fatalf("expect \"%s\", got \"%s\"", c.secs, secs)
		}
		if millis != c.millis {
			t.Fatalf("expect \"%s\", got \"%s\"", c.millis, millis)
		}
		if nanos != c.nanos {
			t.Fatalf("expect \"%s\", got \"%s\"", c.nanos, nanos)
		}
		if human != c.human {
			t.Fatalf("expect \"%s\", got \"%s\"", c.human, human)
		}
		fmt.Printf("|%16s|%20s|%26s|%16s|\n", secs, millis, nanos, human)
		// fmt.Printf("{%d, \"%s\", \"%s\", \"%s\", \"%s\"},\n", c.in,
		// 	secs, millis, nanos, human)
	}
}
